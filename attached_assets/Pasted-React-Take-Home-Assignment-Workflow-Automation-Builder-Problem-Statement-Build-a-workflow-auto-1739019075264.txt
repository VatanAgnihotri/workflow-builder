React Take-Home Assignment: Workflow Automation
Builder

Problem Statement
Build a workflow automation builder that allows users to create, visualize, and manage workflows.
A workflow consists of nodes (representing tasks or actions) and edges (representing connections
between tasks). Users should be able to drag-and-drop nodes, configure their properties using
forms, and visualize the workflow in real-time. This problem will test the candidate's ability to handle
complex forms, dynamic data rendering, and graph-based UI design.

Requirements
1. Core Features
○ Workflow Canvas:
■ Use React Flow (https://reactflow.dev/) to create an interactive canvas where
users can drag-and-drop nodes and connect them with edges.
■ Support at least 3 types of nodes (e.g., "Task", "Condition", "Notification").
■ Allow users to delete nodes and edges.
○ Node Configuration:
■ When a node is clicked, open a side panel with a form to configure its
properties.
■ Use React Hook Form (https://react-hook-form.com/) to build the
configuration form.
■ Each node type should have a unique form with relevant fields (e.g., a "Task"
node might have fields like "Task Name", "Assignee", "Due Date").

○ Workflow Data Table:
■ Use React Table (https://tanstack.com/table/v8) to display a table
summarizing all nodes in the workflow.
■ The table should include columns like "Node Type", "Node Name", "Status",
and "Actions".
■ Allow users to edit node properties directly from the table (e.g., inline editing).

2. Advanced Features
○ Validation:
■ Add validation to the node configuration forms (e.g., required fields, date
validation).
○ Undo/Redo:
■ Implement undo/redo functionality for node and edge actions (e.g., adding,
deleting, or moving nodes).

○ Export/Import:

■ Allow users to export the workflow as a JSON file and import it back into the
application.
3. Abstraction and Reusability
○ Create reusable components for the workflow canvas, node configuration forms, and
data table.
○ Use custom hooks to abstract logic for form handling, workflow state management,
and undo/redo functionality.
○ Ensure the codebase is modular and follows best practices.
4. Design and User Experience
○ Design a clean and intuitive UI that prioritizes usability.
○ Use a CSS-in-JS library (e.g., styled-components, Emotion) or a utility-first CSS
framework (e.g., Tailwind CSS) for styling.
○ Ensure the application is responsive and works well on different screen sizes.
○ Add animations or transitions to enhance the user experience (e.g., smooth
drag-and-drop, form transitions).

5. Performance Optimization
○ Optimize the application for performance (e.g., memoization, avoiding unnecessary
re-renders).
○ Handle large workflows efficiently (e.g., virtualized rendering for the canvas or table).
6. Bonus (Optional)
○ Add real-time collaboration using WebSockets, allowing multiple users to edit the
same workflow simultaneously.
○ Implement conditional logic for edges (e.g., only connect certain types of nodes).
○ Write unit tests for critical components using Jest and React Testing Library.

Deliverables
1. A working React application hosted on a platform of your choice (e.g., Vercel, Netlify or even
local).
2. A GitHub repository with the source code.
3. A README file that includes:
○ Instructions to run the project locally.
○ A brief explanation of your design decisions and trade-offs.
○ Any assumptions you made during development.

Evaluation Criteria
1. Code Quality:
○ Clean, modular, and well-structured code.
○ Proper use of React best practices (e.g., hooks, state management).
2. Abstraction:
○ Effective use of reusable components and custom hooks.

○ Separation of concerns and logical organization of code.
3. Complexity Handling:
○ Smooth handling of dynamic forms, tables, and graph-based UI.
○ Proper handling of edge cases (e.g., invalid form inputs, large workflows).
4. Design:
○ Intuitive and visually appealing UI.
○ Attention to detail (e.g., spacing, typography, colors).
5. Performance:
○ Efficient handling of large workflows and real-time updates.
○ Optimizations to ensure smooth user experience.
6. Creativity:
○ Unique features or enhancements that go beyond the requirements.